name: Process Excel to JSON

# Trigger when Excel file in data/ folder is updated
on:
  push:
    paths:
      - 'data/*.xlsx'
      - 'data/*.xls'
  workflow_dispatch:
    inputs:
      force_run:
        description: 'Force run conversion even without Excel changes'
        required: false
        default: 'false'

jobs:
  convert-excel:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install dependencies
      run: |
        npm init -y
        npm install xlsx@https://cdn.sheetjs.com/xlsx-latest/xlsx-latest.tgz
        
    - name: Convert Excel to JSON
      run: |
        node -e "
        const XLSX = require('xlsx');
        const fs = require('fs');
        const path = require('path');
        
        function generateId() {
          return Math.random().toString(36).substr(2, 13);
        }
        
        console.log('Converting Excel Agenda sheet to JSON...');
        
        try {
          // Find Excel files in data directory
          const dataDir = './data';
          const files = fs.readdirSync(dataDir).filter(f => f.match(/\.(xlsx?)$/i) && !f.startsWith('~'));
          
          if (files.length === 0) {
            console.log('No Excel files found in data directory');
            process.exit(0);
          }
          
          const excelFile = path.join(dataDir, files[0]);
          console.log('Processing:', excelFile);
          
          const workbook = XLSX.readFile(excelFile);
          const worksheet = workbook.Sheets['Agenda'];
          
          if (!worksheet) {
            throw new Error('Agenda sheet not found. Available sheets: ' + workbook.SheetNames.join(', '));
          }
          
          // Get raw data starting from row 3 (headers)
          const rawData = XLSX.utils.sheet_to_json(worksheet, { 
            range: 2, // Start from row 3 (0-indexed)
            header: 1 // Use first row as headers
          });
          
          console.log('Found', rawData.length, 'data rows');
          
          if (rawData.length === 0) {
            throw new Error('No data found in Agenda sheet');
          }
          
          // Process each data row
          const sessions = [];
          
          for (let i = 1; i < rawData.length; i++) { // Skip header row
            const row = rawData[i];
            if (!row || row.length === 0) continue;
            
            // Map columns by index based on Excel structure
            const id = row[0] || generateId();
            const title = row[1] || '';
            const description = row[2] || '';
            const startDateTime = row[4]; // Excel date serial
            const endDateTime = row[5];   // Excel date serial
            const visible = row[6] || 'Visible';
            const speaker = row[7] || '';
            const room = row[8] || '—';
            
            // Skip empty or invalid sessions
            if (!title || title.trim() === '') continue;
            
            // Convert Excel date serial to JavaScript Date
            let day = '';
            let start = '';
            let end = '';
            
            if (typeof startDateTime === 'number') {
              // Excel date serial to JS Date: (serial - 25569) * 86400 * 1000
              const startDate = new Date((startDateTime - 25569) * 86400 * 1000);
              if (!isNaN(startDate.getTime())) {
                day = startDate.toISOString().split('T')[0]; // YYYY-MM-DD
                start = startDate.toISOString().replace('Z', '-07:00'); // Pacific time
              }
            }
            
            if (typeof endDateTime === 'number') {
              const endDate = new Date((endDateTime - 25569) * 86400 * 1000);
              if (!isNaN(endDate.getTime())) {
                end = endDate.toISOString().replace('Z', '-07:00');
              }
            }
            
            // Determine if session is enabled for registration
            let regEnabled = true;
            const regValue = row[11]; // Session Registration (Enabled/Disabled) column
            if (regValue) {
              const valueStr = regValue.toString().toLowerCase();
              regEnabled = valueStr.includes('enabled') || valueStr === 'true' || valueStr === '1' || valueStr === 'yes';
            }
            if (visible && visible.toLowerCase().includes('hidden')) {
              regEnabled = false;
            }
            
            // Get track, level from appropriate columns
            const track = row[20] || 'General'; // 1st Filter column
            const level = row[22] || 'All';     // 2nd Filter column
            
            const session = {
              id: id.toString(),
              title: title.toString(),
              track: track.toString(),
              day,
              start,
              end,
              room: room.toString(),
              speaker: speaker.toString() || '—',
              level: level.toString(),
              description: description.toString(),
              regEnabled
            };
            
            // Only add sessions with valid day
            if (session.day) {
              sessions.push(session);
              console.log('Processed: ' + session.title + ' on ' + session.day);
            }
          }
          
          console.log('Successfully processed ' + sessions.length + ' sessions');
          
          // Show sample
          if (sessions.length > 0) {
            console.log('Sample session:', JSON.stringify(sessions[0], null, 2));
          }
          
          // Create output JSON
          const output = {
            metadata: {
              generatedAt: new Date().toISOString(),
              source: path.basename(excelFile),
              totalSessions: sessions.length
            },
            sessions
          };
          
          // Write to agenda.json
          fs.writeFileSync('./agenda.json', JSON.stringify(output, null, 2));
          console.log('✅ Generated agenda.json with ' + sessions.length + ' sessions');
          
        } catch (error) {
          console.error('❌ Error:', error.message);
          process.exit(1);
        }
        "
        
    - name: Commit changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add agenda.json
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "Auto-update agenda.json from Excel data
          
          🤖 Generated from: $(ls data/*.xlsx data/*.xls 2>/dev/null | head -1 | xargs basename)
          📅 Generated at: $(date -u +'%Y-%m-%d %H:%M:%S UTC')
          "
          git push
        fi